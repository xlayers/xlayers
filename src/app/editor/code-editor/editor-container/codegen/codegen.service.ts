import { Injectable } from '@angular/core';
import { AngularCodeGenService } from './angular/angular.service';
import { ReactCodeGenService } from './react/react.service';
import { VueCodeGenService } from './vue/vue.service';
import { WCCodeGenService } from './wc/wc.service';
import { NgxEditorModel } from 'ngx-monaco-editor';
import { Store } from '@ngxs/store';
import { UiState } from 'src/app/core/state';
import { environment } from 'src/environments/environment.hmr';

export interface XlayersNgxEditorModel extends NgxEditorModel {
  kind: 'angular' | 'react' | 'vue' | 'wc' | 'html' | 'text';
}

export interface CodeGenFacade {
  generate(ast: SketchMSLayer): Array<XlayersNgxEditorModel>;
}

@Injectable({
  providedIn: 'root'
})
export class CodeGenService {
  static Kind = {
    Angular: 'angular',
    React: 'react',
    Vue: 'vue',
    WC: 'webcomponent'
  };

  private ast: SketchMSLayer;

  constructor(
    private readonly angular: AngularCodeGenService,
    private readonly react: ReactCodeGenService,
    private readonly vue: VueCodeGenService,
    private readonly wc: WCCodeGenService,
    private readonly store: Store
  ) {
    this.store.select(UiState.currentPage).subscribe((currentPage: SketchMSLayer) => {
      this.ast = currentPage;
    });
  }

  addHeaderInfo(content: Array<XlayersNgxEditorModel>) {
    return content.map(file => {
      const message = 'File auto-generated by xLayers.app';
      const version = `Build: ${ environment.version }`;
      const date = `Date: ${ (new Date()).toLocaleString() }`;
      let comment = {
        start: '//',
        end: ''
      };
      if (file.language.includes('html')) {
        comment.start = '<!--';
        comment.end = '-->';
      }
      else if (file.language.includes('css')) {
        comment.start = '#';
      }

      file.value = [
        `${ comment.start } ${ message } ${ comment.end }`,
        `${ comment.start } ${ version } ${ comment.end }`,
        `${ comment.start } ${ date } ${ comment.end }`,
        '',
        file.value
      ].join('\n');

      return file;
    });
  }

  generate(kind: string): Array<XlayersNgxEditorModel> {
    switch (kind) {
      case CodeGenService.Kind.Angular:
        return this.addHeaderInfo( this.angular.generate(this.ast) );
      case CodeGenService.Kind.React:
        return this.addHeaderInfo( this.react.generate(this.ast) );
      case CodeGenService.Kind.Vue:
        return this.addHeaderInfo( this.vue.generate(this.ast) );
      case CodeGenService.Kind.WC:
        return this.addHeaderInfo( this.wc.generate(this.ast) );
    }
  }
}
