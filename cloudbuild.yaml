steps:
# - name: 'gcr.io/cross-xlayers/ngcontainer'
#   entrypoint: 'bash'
  
# #   Check BUILD.bazel formatting before we have a node_modules directory
# #   Then we don't need any exclude pattern to avoid checking those files
#   args: 
#     - '-c'
#     - |
#     - buildifier -mode=check $(find . -type f \( -name "*.bzl" -or -name BUILD.bazel -or -name BUILD \)) || 
#         (echo "BUILD files not formatted." ; exit 1)

# - name: 'gcr.io/cross-xlayers/ngcontainer'
#   entrypoint: 'bash'
  
# #   Run the skylark linter to check our Bazel rules
# #   deprecated-api is disabled because we use actions.new_file(genfiles_dir)
# #   which has no replacement, see https://github.com/bazelbuild/bazel/issues/4858
#   args: 
#     - '-c'
#     - |
#     - find . -type f -name "*.bzl" |
#               xargs java -jar /usr/local/bin/Skylint_deploy.jar --disable-checks=deprecated-api || 
#               (echo -e "\n.bzl files have lint errors. Please run ''yarn skylint''"; exit 1)

- name: 'gcr.io/cross-xlayers/ngcontainer'
  entrypoint: 'npm'
  args: ['install']

- name: 'gcr.io/cross-xlayers/ngcontainer'
  entrypoint: 'npm'
  args: ['run', 'test:ci']

- name: 'gcr.io/cross-xlayers/ngcontainer'
  entrypoint: 'npm'
  args: ['run', 'build', '--', '--output-path', 'dist/html']

# Build snapshot images and push them to Cloud Registry

- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/xlayers:$SHORT_SHA', '.']
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/xlayers:$SHORT_SHA']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/xlayers:latest', '.']
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/xlayers:latest']

# # Copy the content of dist directory to the Persistent Volume

# # - name: 'gcr.io/cross-xlayers/ngcontainer'
# #   entrypoint: 'sh'
# #   args: 
# #     - '-c'
# #     - |
# #         PODS=$(kubectl get pods --namespace default -l app.kubernetes.io/name=nginx-ingress | awk 'FNR>1 {print $1}')
# #         for i in ${PODS[@]}; do
# #             echo "Updating Pod: $i..."
# #             cp -R dist nginx-ingress-nginx-$i:/usr/share/nginx/html -n default
# #             echo "Sleeping for 10 seconds..."
# #             sleep 10
# #         done
  
# #   env:
# #   - 'CLOUDSDK_COMPUTE_ZONE=-central1-a'
# #   - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-small'

# # Set permissions so NGINX server has access to the newly uploaded html directory

# # - name: 'gcr.io/cross-xlayers/ngcontainer'
# #   entrypoint: 'bash'
# #   args: 
# #     - '-c'
# #     - |
# #         PODS=$(kubectl get pods --namespace default -l app.kubernetes.io/name=nginx-ingress | awk 'FNR>1 {print $1}')
# #         for i in ${PODS[@]}; do
# #             echo "Setting permissions for Pod: $i..."
# #             kubectl exec nginx-ingress-nginx-$i -n default -- chmod -R a+r /usr/share/nginx/html
# #             echo "Sleeping for 10 seconds..."
# #             sleep 10
# #         done
  
# #   env:
# #   - 'CLOUDSDK_COMPUTE_ZONE=-central1-a'
# #   - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-small'

# # Copy the content of dist directory to the Persistent Volume

# - name: 'gcr.io/cloud-builders/kubectl'
#   args: 
#     - 'cp'
#     - './dist/html'
#     - 'ingress-$SHORT_SHA:/usr/share/nginx/html'

#   env:
#   - 'CLOUDSDK_COMPUTE_ZONE=-central1-a'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-small'

# # Set permissions so NGINX server has access to the newly uploaded html directory

# - name: 'gcr.io/cloud-builders/kubectl'
#   args: 
#     - 'exec'
#     - 'ingress-$SHORT_SHA'
#     - '--'
#     - 'chmod'
#     - '-R'
#     - 'a+r'
#     - '/usr/share/nginx/html'

#   env:
#   - 'CLOUDSDK_COMPUTE_ZONE=-central1-a'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-small'

# Patch a new Ingress ressource for the build $SHORT_SHA

- name: 'gcr.io/cross-xlayers/ngcontainer'
  entrypoint: 'sh'
  args: 
    - '-c'
    - |
        perl -pe "s/SHORT_SHA/$SHORT_SHA/g" scripts/cloudbuild/xlayers.template.yaml > xlayers.$SHORT_SHA.yaml

# Apply a new Ingress ressource for the build $SHORT_SHA

- name: 'gcr.io/cloud-builders/kubectl'
  args: |
    apply -f xlayers.$SHORT_SHA.yaml
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=-central1-a'
  - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-small'

images:
  - 'gcr.io/$PROJECT_ID/xlayers:$SHORT_SHA'
  - 'gcr.io/$PROJECT_ID/xlayers:latest'